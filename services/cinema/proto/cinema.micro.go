// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cinema.proto

package cinema

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cinema service

type CinemaService interface {
	CreateHall(ctx context.Context, in *CreateHallRequest, opts ...client.CallOption) (*CreateHallResult, error)
	DeleteHall(ctx context.Context, in *DeleteHallRequest, opts ...client.CallOption) (*DeleteHallResult, error)
	GetHallList(ctx context.Context, in *GetHallListRequest, opts ...client.CallOption) (*GetHallListResult, error)
}

type cinemaService struct {
	c    client.Client
	name string
}

func NewCinemaService(name string, c client.Client) CinemaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cinema"
	}
	return &cinemaService{
		c:    c,
		name: name,
	}
}

func (c *cinemaService) CreateHall(ctx context.Context, in *CreateHallRequest, opts ...client.CallOption) (*CreateHallResult, error) {
	req := c.c.NewRequest(c.name, "Cinema.CreateHall", in)
	out := new(CreateHallResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) DeleteHall(ctx context.Context, in *DeleteHallRequest, opts ...client.CallOption) (*DeleteHallResult, error) {
	req := c.c.NewRequest(c.name, "Cinema.DeleteHall", in)
	out := new(DeleteHallResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) GetHallList(ctx context.Context, in *GetHallListRequest, opts ...client.CallOption) (*GetHallListResult, error) {
	req := c.c.NewRequest(c.name, "Cinema.GetHallList", in)
	out := new(GetHallListResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cinema service

type CinemaHandler interface {
	CreateHall(context.Context, *CreateHallRequest, *CreateHallResult) error
	DeleteHall(context.Context, *DeleteHallRequest, *DeleteHallResult) error
	GetHallList(context.Context, *GetHallListRequest, *GetHallListResult) error
}

func RegisterCinemaHandler(s server.Server, hdlr CinemaHandler, opts ...server.HandlerOption) error {
	type cinema interface {
		CreateHall(ctx context.Context, in *CreateHallRequest, out *CreateHallResult) error
		DeleteHall(ctx context.Context, in *DeleteHallRequest, out *DeleteHallResult) error
		GetHallList(ctx context.Context, in *GetHallListRequest, out *GetHallListResult) error
	}
	type Cinema struct {
		cinema
	}
	h := &cinemaHandler{hdlr}
	return s.Handle(s.NewHandler(&Cinema{h}, opts...))
}

type cinemaHandler struct {
	CinemaHandler
}

func (h *cinemaHandler) CreateHall(ctx context.Context, in *CreateHallRequest, out *CreateHallResult) error {
	return h.CinemaHandler.CreateHall(ctx, in, out)
}

func (h *cinemaHandler) DeleteHall(ctx context.Context, in *DeleteHallRequest, out *DeleteHallResult) error {
	return h.CinemaHandler.DeleteHall(ctx, in, out)
}

func (h *cinemaHandler) GetHallList(ctx context.Context, in *GetHallListRequest, out *GetHallListResult) error {
	return h.CinemaHandler.GetHallList(ctx, in, out)
}
