// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: show.proto

package show

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Show service

type ShowService interface {
	DeleteShow(ctx context.Context, in *DeleteShowRequest, opts ...client.CallOption) (*DeleteShowResult, error)
	CreateShow(ctx context.Context, in *CreateShowRequest, opts ...client.CallOption) (*CreateShowResult, error)
	FromHallDelete(ctx context.Context, in *DeleteShowOfHallRequest, opts ...client.CallOption) (*DeleteShowOfHallResult, error)
	FromMovieDelete(ctx context.Context, in *DeleteShowOfMovieRequest, opts ...client.CallOption) (*DeleteShowOfMovieResult, error)
	AskSeats(ctx context.Context, in *FreeSeatsRequest, opts ...client.CallOption) (*FreeSeatsResult, error)
	UpdateSeats(ctx context.Context, in *UpdateSeatsRequest, opts ...client.CallOption) (*UpdateSeatsResult, error)
}

type showService struct {
	c    client.Client
	name string
}

func NewShowService(name string, c client.Client) ShowService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "show"
	}
	return &showService{
		c:    c,
		name: name,
	}
}

func (c *showService) DeleteShow(ctx context.Context, in *DeleteShowRequest, opts ...client.CallOption) (*DeleteShowResult, error) {
	req := c.c.NewRequest(c.name, "Show.DeleteShow", in)
	out := new(DeleteShowResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) CreateShow(ctx context.Context, in *CreateShowRequest, opts ...client.CallOption) (*CreateShowResult, error) {
	req := c.c.NewRequest(c.name, "Show.CreateShow", in)
	out := new(CreateShowResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) FromHallDelete(ctx context.Context, in *DeleteShowOfHallRequest, opts ...client.CallOption) (*DeleteShowOfHallResult, error) {
	req := c.c.NewRequest(c.name, "Show.FromHallDelete", in)
	out := new(DeleteShowOfHallResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) FromMovieDelete(ctx context.Context, in *DeleteShowOfMovieRequest, opts ...client.CallOption) (*DeleteShowOfMovieResult, error) {
	req := c.c.NewRequest(c.name, "Show.FromMovieDelete", in)
	out := new(DeleteShowOfMovieResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) AskSeats(ctx context.Context, in *FreeSeatsRequest, opts ...client.CallOption) (*FreeSeatsResult, error) {
	req := c.c.NewRequest(c.name, "Show.AskSeats", in)
	out := new(FreeSeatsResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) UpdateSeats(ctx context.Context, in *UpdateSeatsRequest, opts ...client.CallOption) (*UpdateSeatsResult, error) {
	req := c.c.NewRequest(c.name, "Show.UpdateSeats", in)
	out := new(UpdateSeatsResult)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Show service

type ShowHandler interface {
	DeleteShow(context.Context, *DeleteShowRequest, *DeleteShowResult) error
	CreateShow(context.Context, *CreateShowRequest, *CreateShowResult) error
	FromHallDelete(context.Context, *DeleteShowOfHallRequest, *DeleteShowOfHallResult) error
	FromMovieDelete(context.Context, *DeleteShowOfMovieRequest, *DeleteShowOfMovieResult) error
	AskSeats(context.Context, *FreeSeatsRequest, *FreeSeatsResult) error
	UpdateSeats(context.Context, *UpdateSeatsRequest, *UpdateSeatsResult) error
}

func RegisterShowHandler(s server.Server, hdlr ShowHandler, opts ...server.HandlerOption) error {
	type show interface {
		DeleteShow(ctx context.Context, in *DeleteShowRequest, out *DeleteShowResult) error
		CreateShow(ctx context.Context, in *CreateShowRequest, out *CreateShowResult) error
		FromHallDelete(ctx context.Context, in *DeleteShowOfHallRequest, out *DeleteShowOfHallResult) error
		FromMovieDelete(ctx context.Context, in *DeleteShowOfMovieRequest, out *DeleteShowOfMovieResult) error
		AskSeats(ctx context.Context, in *FreeSeatsRequest, out *FreeSeatsResult) error
		UpdateSeats(ctx context.Context, in *UpdateSeatsRequest, out *UpdateSeatsResult) error
	}
	type Show struct {
		show
	}
	h := &showHandler{hdlr}
	return s.Handle(s.NewHandler(&Show{h}, opts...))
}

type showHandler struct {
	ShowHandler
}

func (h *showHandler) DeleteShow(ctx context.Context, in *DeleteShowRequest, out *DeleteShowResult) error {
	return h.ShowHandler.DeleteShow(ctx, in, out)
}

func (h *showHandler) CreateShow(ctx context.Context, in *CreateShowRequest, out *CreateShowResult) error {
	return h.ShowHandler.CreateShow(ctx, in, out)
}

func (h *showHandler) FromHallDelete(ctx context.Context, in *DeleteShowOfHallRequest, out *DeleteShowOfHallResult) error {
	return h.ShowHandler.FromHallDelete(ctx, in, out)
}

func (h *showHandler) FromMovieDelete(ctx context.Context, in *DeleteShowOfMovieRequest, out *DeleteShowOfMovieResult) error {
	return h.ShowHandler.FromMovieDelete(ctx, in, out)
}

func (h *showHandler) AskSeats(ctx context.Context, in *FreeSeatsRequest, out *FreeSeatsResult) error {
	return h.ShowHandler.AskSeats(ctx, in, out)
}

func (h *showHandler) UpdateSeats(ctx context.Context, in *UpdateSeatsRequest, out *UpdateSeatsResult) error {
	return h.ShowHandler.UpdateSeats(ctx, in, out)
}
